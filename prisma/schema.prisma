generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                   @id @default(autoincrement())
  name                  String                @db.VarChar(255) @unique
  email                 String                @db.VarChar(255) @unique
  iconUrl               String                @db.VarChar(255)
  profile               String                @db.VarChar(255)
  isAdmin               Boolean               @db.Boolean
  isStreamer            Boolean               @db.Boolean
  stripeAccountId       String                @db.VarChar(255) @unique
  createdAt             DateTime              @db.Timestamp(3)
  updatedAt             DateTime              @db.Timestamp(3)
  plans                 Plan[]
  availableDateTimes    AvailableDateTime[]
  reservations          Reservation[]         @relation(name: "User")
  streamerReservations  Reservation[]         @relation(name: "Streamer")
}

model Plan {
  id                    Int       @id @default(autoincrement())
  name                  String    @db.VarChar(255)
  description           String    @db.VarChar(255)
  amount                Int       @db.Integer
  stripeProductId       String    @db.VarChar(255)
  stripePriceId         String    @db.VarChar(255)
  stripePaymentLinkId   String    @db.VarChar(255)
  createdAt             DateTime  @db.Timestamp(3)
  updatedAt             DateTime  @db.Timestamp(3)
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
  game                  Game      @relation(fields: [gameId], references: [id])
  gameId                Int
}

model Game {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  iconUrl     String      @db.VarChar(255)
  createdAt   DateTime    @db.Timestamp(3)
  updatedAt   DateTime    @db.Timestamp(3)
  plans       Plan[]
}

model AvailableDateTime {
  id            Int           @id @default(autoincrement())
  startDateTime DateTime      @db.Timestamp(3)
  createdAt     DateTime      @db.Timestamp(3)
  updatedAt     DateTime      @db.Timestamp(3)
  user          User          @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation?  @relation(fields: [reservationId], references: [id])
  reservationId Int?
}

model Reservation {
  id                  Int       @id @default(autoincrement())
  planId              String    @db.VarChar(255)
  startDateTime       DateTime  @db.Timestamp(3)
  endDateTime         DateTime  @db.Timestamp(3)
  isAvailable         Boolean   @db.Boolean() @default(false)
  createdAt           DateTime  @db.Timestamp(3)
  updatedAt           DateTime  @db.Timestamp(3)
  streamer            User      @relation(name: "Streamer", fields: [streamerId], references: [id])
  streamerId          Int
  user                User      @relation(name: "User", fields: [userId], references: [id])
  userId              Int
  availableDateTimes  AvailableDateTime[]
}
